#ifndef EVOLUTION_HPP
#define EVOLUTION_HPP

////////////////////////////////////////////////////////////
///	INCLUDES
////////////////////////////////////////////////////////////
#include <vector>
#include <random>


////////////////////////////////////////////////////////////
///	AI
////////////////////////////////////////////////////////////
namespace ai
{

	struct particle
	{
		std::vector<double> v; //velocities
		std::vector<double> pos; //position in the parameterspace
		std::vector<double> bestpos; //best position in the parameterspace
		double bestscore; //best score so far
	};

	////////////////////////////////////////////////////////////
	///	Particle Swarm Optimization
	////////////////////////////////////////////////////////////
	class pso
	{
		public:

			////////////////////////////////////////////////////////////
			/// \brief	Initialize pso
			///
			////////////////////////////////////////////////////////////
			pso(int particles_count, int params_count, double(*eval)(std::vector<double>&), double learning_rate_local, double learning_rate_global);

			////////////////////////////////////////////////////////////
			/// \brief Run the particle swarm for X steps
			///
			////////////////////////////////////////////////////////////
			void run(unsigned long steps);
			
			////////////////////////////////////////////////////////////
			/// \brief	Get the best position found in the parameterspace	
			///
			////////////////////////////////////////////////////////////
			std::vector<double> getBestParams();
			
			////////////////////////////////////////////////////////////
			/// \brief	Get the best score	
			///
			////////////////////////////////////////////////////////////
			double getBestScore();

			////////////////////////////////////////////////////////////
			/// \brief	Set local learning rate	
			///
			////////////////////////////////////////////////////////////
			void setLocalLearningrate(double val);
			
			////////////////////////////////////////////////////////////
			/// \brief	Set global learning rate	
			///
			////////////////////////////////////////////////////////////
			void setGlobalLearningrate(double val);

			////////////////////////////////////////////////////////////
			/// \brief	Get local learning rate	
			///
			////////////////////////////////////////////////////////////
			double getLocalLearningrate();
			
			////////////////////////////////////////////////////////////
			/// \brief	Get global learning rate	
			///
			////////////////////////////////////////////////////////////
			double getGlobalLearningrate();
			
			////////////////////////////////////////////////////////////
			/// \brief	Get the particles	
			///
			////////////////////////////////////////////////////////////
			const std::vector<particle>& getParticles();
		
		private:
			
			//Population parameters
			int _particles_count;
			int _params_count;
			double _learning_rate_local;
			double _learning_rate_global;
			std::vector<particle> _particles;
			
			//Best position
			double _global_bestscore;
			std::vector<double> _global_bestpos;
			
			//Evaluation function
			double(*_eval)(std::vector<double>& params);
	};

} //namespace ai

#endif /* end of include guard: EVOLUTION_HPP */

